import requests
from requests.exceptions import RequestException
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.ext import MessageHandler, filters, ConversationHandler
from dotenv import load_dotenv

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_PREFERENCES = 1

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEB_APP_URL = os.getenv("WEB_APP_URL")
BAKEND_URL = os.getenv("BAKEND_URL")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üçÖ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–¢–µ–ø–ª–∏—Ü—É"!* üå±

–ú—ã - –∫–∞—Ñ–µ —Å –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ –≤–∫—É—Å—É:
‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏
‚Ä¢ –°—ã—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏
‚Ä¢ –°–≤–µ–∂–∏–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã —Å —Å–æ–±–æ–π
‚Ä¢ –ë–ª—é–¥–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö –¥–∏–µ—Ç

*–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—Å!*
"""
    
    keyboard = [
        [KeyboardButton("üçΩÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", web_app=WebAppInfo(url=WEB_APP_URL))],
        [KeyboardButton("üå± –£ –º–µ–Ω—è –æ—Å–æ–±—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")],
        [KeyboardButton("üïí –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–≤–µ–∂–µ–µ?")],
        [KeyboardButton("üìç –ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return ConversationHandler.END

async def handle_preferences_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = """
*–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é*
–ù–∞–ø—Ä–∏–º–µ—Ä: "–í–µ–≥–∞–Ω, –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏" –∏–ª–∏ "–ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã"
"""
    await update.message.reply_text(response, parse_mode="Markdown")
    return WAITING_FOR_PREFERENCES

async def handle_preferences_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_preferences = update.message.text
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –±—ç–∫–µ–Ω–¥
        payload = {
            "id": str(update.effective_user.id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É
            "restrictions": user_preferences
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º–∏ –∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —á—Ç–æ –∏ –≤ curl
        response = requests.post(
            f"{BAKEND_URL}/users",
            json=payload,
            headers={
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            timeout=5
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        response.raise_for_status()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        print(f"–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É. –û—Ç–≤–µ—Ç: {response.json()}")
        
        answer = "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
        
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±—ç–∫–µ–Ω–¥—É: {str(e)}")
        answer = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await update.message.reply_text(answer, parse_mode="Markdown")
    await start(update, context)
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üå± –£ –º–µ–Ω—è –æ—Å–æ–±—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è":
        return await handle_preferences_start(update, context)
    elif text == "üïí –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–≤–µ–∂–µ–µ?":
        response = "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n‚Ä¢ –°—ã—Ä–Ω–∏–∫–∏ —Å –º–∞–ª–∏–Ω–æ–π (–±–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤—ã–µ)\n‚Ä¢ –¢—ã–∫–≤–µ–Ω–Ω—ã–π –∫—Ä–µ–º-—Å—É–ø\n‚Ä¢ –°–µ—Ç '–§–µ—Ä–º–µ—Ä—Å–∫–∏–π' —Å –∫–æ—Ç–ª–µ—Ç–æ–π –∏–∑ –Ω—É—Ç–∞\n\n–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –º–µ–Ω—é üëá"
        await update.message.reply_text(response)
    elif text == "üìç –ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?":
        response = "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ—Ñ–∏—Å–µ 2–ì–ò–°, 1 —ç—Ç–∞–∂.\n–†–∞–±–æ—Ç–∞–µ–º –ü–Ω-–ü—Ç —Å 8:00 –¥–æ 18:00.\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫?"
        await update.message.reply_text(response)
    else:
        await start(update, context)
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            WAITING_FOR_PREFERENCES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_preferences_input)
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)

    print("–ë–æ—Ç '–¢–µ–ø–ª–∏—Ü–∞' –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üåø")
    application.run_polling()

if __name__ == "__main__":
    main()